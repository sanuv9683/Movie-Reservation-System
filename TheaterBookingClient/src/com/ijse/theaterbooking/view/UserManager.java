/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ijse.theaterbooking.view;

import com.ijse.theaterbooking.connector.ServerConnector;
import com.ijse.theaterbooking.controller.UserController;
import com.ijse.theaterbooking.model.Users;
import com.ijse.theaterbooking.observerimpl.UserObserverImpl;
import com.ijse.theaterbooking.validation.Validation;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sanu Vithanage
 */
public class UserManager extends javax.swing.JPanel {

    UserObserverImpl userObserverImpl;

    public UserManager() throws ClassNotFoundException, NotBoundException, RemoteException, SQLException, IOException, MalformedURLException, FileNotFoundException, ParseException {
        initComponents();
        loadTableValues();
        UserController userController = ServerConnector.getServerConnector().getUserController();
        userObserverImpl = new UserObserverImpl(this);
        userController.addUserObserver(userObserverImpl);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userId = new javax.swing.JTextField();
        userName = new javax.swing.JTextField();
        emailTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        BDaytxt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        searchB = new javax.swing.JButton();
        canselB = new javax.swing.JButton();
        bdayChoser = new com.toedter.calendar.JDateChooser();
        tpNo = new javax.swing.JTextField();
        userPs = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTabel = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        deleteB = new javax.swing.JButton();
        updateB = new javax.swing.JButton();
        saveB = new javax.swing.JButton();
        movieNa = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1000, 580));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userIdActionPerformed(evt);
            }
        });
        userId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userIdKeyPressed(evt);
            }
        });
        add(userId, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 200, 30));

        userName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameActionPerformed(evt);
            }
        });
        userName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userNameKeyReleased(evt);
            }
        });
        add(userName, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 200, 30));

        emailTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emailTxtKeyReleased(evt);
            }
        });
        add(emailTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 200, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Email");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 280, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tp No");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Password");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("User Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, -1, -1));

        BDaytxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BDaytxt.setForeground(new java.awt.Color(255, 255, 255));
        BDaytxt.setText("BDay");
        add(BDaytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 350, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("User ID");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 170, -1, -1));

        searchB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/theaterbooking/view/images/searcfff.png"))); // NOI18N
        searchB.setContentAreaFilled(false);
        searchB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBMouseClicked(evt);
            }
        });
        add(searchB, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 410, 90, 45));

        canselB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/theaterbooking/view/images/hyuhyu.png"))); // NOI18N
        canselB.setContentAreaFilled(false);
        canselB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canselBMouseClicked(evt);
            }
        });
        add(canselB, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 410, 90, 45));
        add(bdayChoser, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, -1, 30));

        tpNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tpNoKeyReleased(evt);
            }
        });
        add(tpNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 220, 200, 30));
        add(userPs, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 200, 30));

        userTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserName", "UserID", "BDay", "Tp No"
            }
        ));
        jScrollPane1.setViewportView(userTabel);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, 490, 290));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/theaterbooking/view/images/fccfcfc.png"))); // NOI18N
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 530, 320));

        deleteB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/theaterbooking/view/images/dfrdfr.png"))); // NOI18N
        deleteB.setContentAreaFilled(false);
        deleteB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBMouseClicked(evt);
            }
        });
        add(deleteB, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 410, 90, 45));

        updateB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/theaterbooking/view/images/htrhtr.png"))); // NOI18N
        updateB.setContentAreaFilled(false);
        updateB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateBMouseClicked(evt);
            }
        });
        add(updateB, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 410, 90, 45));

        saveB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/theaterbooking/view/images/sbfsbf.png"))); // NOI18N
        saveB.setContentAreaFilled(false);
        saveB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBMouseClicked(evt);
            }
        });
        add(saveB, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 410, 90, 45));

        movieNa.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 36)); // NOI18N
        movieNa.setForeground(new java.awt.Color(255, 255, 255));
        movieNa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movieNa.setText("User Manager");
        movieNa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movieNaMouseClicked(evt);
            }
        });
        add(movieNa, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 420, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/theaterbooking/view/images/tt2.png"))); // NOI18N
        jLabel1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                jLabel1AncestorRemoved(evt);
            }
        });
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 470));
    }// </editor-fold>//GEN-END:initComponents

    private void userNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameActionPerformed

    }//GEN-LAST:event_userNameActionPerformed

    private void saveBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBMouseClicked
        try {
            String userNam = userName.getText();
            String useID = userId.getText();
            String tp = tpNo.getText();
            String userEmai = emailTxt.getText();
            String usePs = userPs.getText();
            Date dat = bdayChoser.getDate();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String bDay = dateFormat.format(dat);

            UserController userController = ServerConnector.getServerConnector().getUserController();
            Users user = new Users(userNam, useID, userEmai, tp, bDay, usePs);
            boolean res = userController.registerUsert(user);
            if (res) {
                JOptionPane.showMessageDialog(this, "User Aded");
            } else {
                JOptionPane.showMessageDialog(this, "User Aded");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveBMouseClicked

    private void canselBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canselBMouseClicked

    }//GEN-LAST:event_canselBMouseClicked

    private void deleteBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBMouseClicked
        try {
            String userNam = userName.getText();
            String useID = userId.getText();

            UserController userController = ServerConnector.getServerConnector().getUserController();
            boolean res = userController.deleteUser(useID);
            if (res) {
                JOptionPane.showMessageDialog(this, "UserDeleted");
            } else {
                JOptionPane.showMessageDialog(this, "Not Founded");
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_deleteBMouseClicked

    private void searchBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBMouseClicked
        try {
            String userNam = userName.getText();
            String useID = userId.getText();

            UserController userController = ServerConnector.getServerConnector().getUserController();
            Users user = userController.searchUser(useID);
            if (user != null) {
                userName.setText(user.getUserName());
                userId.setText(user.getUserID());
                tpNo.setText(user.getUserTPNo());
                emailTxt.setText(user.getUserEmail());
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date dob = dateFormat.parse(user.getUserBday());
                bdayChoser.setDate(dob);
            } else {
                JOptionPane.showMessageDialog(this, "No User Found...");
                userName.setText("");
                tpNo.setText("");

            }
        } catch (NotBoundException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchBMouseClicked

    private void userIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userIdKeyPressed

    }//GEN-LAST:event_userIdKeyPressed

    private void updateBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBMouseClicked
        if (!userPs.getText().equals("")) {
            try {
                UserController userController = ServerConnector.getServerConnector().getUserController();
                boolean res = userController.checkRegisteredUser(userName.getText(), userPs.getText());
                if (res) {
                    try {
                        String userNam = userName.getText();
                        String useID = userId.getText();
                        String tp = tpNo.getText();
                        String userEmai = emailTxt.getText();
                        String usePs = userPs.getText();
                        Date dat = bdayChoser.getDate();
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        String bDay = dateFormat.format(dat);

                        UserController userController1 = ServerConnector.getServerConnector().getUserController();
                        Users user = new Users(userNam, useID, userEmai, tp, bDay, usePs);
                        boolean res2 = userController1.updateUser(user);
                        if (res2) {
                            JOptionPane.showMessageDialog(this, "Sucsesfully Updated");
                        } else {
                            JOptionPane.showMessageDialog(this, "Updated faild");
                        }
                    } catch (NotBoundException ex) {
                        Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (RemoteException ex) {
                        Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ParseException ex) {
                        Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Your PassWord Is Wrong");
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NotBoundException ex) {
                Logger.getLogger(UserManager.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please Input The PassWord");
        }


    }//GEN-LAST:event_updateBMouseClicked

    private void userIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userIdActionPerformed
        try {
            String userNam = userName.getText();
            String useID = userId.getText();

            UserController userController = ServerConnector.getServerConnector().getUserController();
            Users user = userController.searchUser(useID);
            if (user != null) {
                userName.setText(user.getUserName());
                tpNo.setText(user.getUserTPNo());
                emailTxt.setText(user.getUserEmail());
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date dob = dateFormat.parse(user.getUserBday());
                bdayChoser.setDate(dob);

            } else {
                JOptionPane.showMessageDialog(this, "No Customer Found...");
                userName.setText("");
                tpNo.setText("");

            }
        } catch (NotBoundException ex) {
            Logger.getLogger(UserManager.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(UserManager.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(UserManager.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(UserManager.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UserManager.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(UserManager.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UserManager.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userIdActionPerformed

    private void movieNaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieNaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_movieNaMouseClicked

    private void jLabel1AncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel1AncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1AncestorRemoved

    private void tpNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tpNoKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.phoneNumber(tpNo);

        }
    }//GEN-LAST:event_tpNoKeyReleased

    private void userNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userNameKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.name(userName);

        }
    }//GEN-LAST:event_userNameKeyReleased

    private void emailTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailTxtKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.isValidEmailAddress(emailTxt.getText());

        }
    }//GEN-LAST:event_emailTxtKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BDaytxt;
    private com.toedter.calendar.JDateChooser bdayChoser;
    private javax.swing.JButton canselB;
    private javax.swing.JButton deleteB;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel movieNa;
    private javax.swing.JButton saveB;
    private javax.swing.JButton searchB;
    private javax.swing.JTextField tpNo;
    private javax.swing.JButton updateB;
    private javax.swing.JTextField userId;
    private javax.swing.JTextField userName;
    private javax.swing.JPasswordField userPs;
    private javax.swing.JTable userTabel;
    // End of variables declaration//GEN-END:variables

    private void loadTableValues() throws ClassNotFoundException, NotBoundException, MalformedURLException, RemoteException, SQLException, IOException, FileNotFoundException, ParseException {
        UserController userController = ServerConnector.getServerConnector().getUserController();
        ArrayList<Users> allUsers = userController.getAllUsers();

        DefaultTableModel dtm = (DefaultTableModel) userTabel.getModel();
        dtm.setRowCount(0);
        for (Users allUser : allUsers) {
            Object[] data = {allUser.getUserName(), allUser.getUserID(), allUser.getUserBday(), allUser.getUserTPNo()};
            dtm.addRow(data);
        }
    }

    public void setMassege(String message) {
        JOptionPane.showMessageDialog(HomePage.mainPa, message);
        System.out.println(message);
    }

}
